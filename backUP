#!/usr/bin/bash

CONFIGURATION_FILE='/etc/backUP.conf'
DATE="$(date +%m-%d-%Y-%I:%M:%S-%p)"
FILENAME=$(basename $0)
IS_NUM_REGEX='^[1-9][0-9]*$'
GETOPT_SHORT='a:e:r:hblcs'
GETOPT_LONG='directory:,password'

usage(){
>&2 cat << EOF

This program is used to manage the backup 'database' defined in '$CONFIGURATION_FILE'

It is probably inefficient, buggy, and prone to explode or worse.

Usage: 
 $FILENAME [option] <file>
 
Options:
 -a <file>      : Add a file to the 'database'
 -b             : Backup 'database' files with borg backup
 -c             : Cleanup backup files
 -e             : Extract a borg backup ( Default to ~/temp )
    --directory : Set extraction directory
 -l             : List all borg backups
 -h             : Display usage information
 -r <file>      : Delete a file from the 'database'
 -s             : Show all paths monitored by $FILENAME
    --password  : Set the BORG Backup password

Caveats:
 1) A new -a or -r flag must preceed each path given, something like:
      $FILENAME -a <file1> -a <file2> 

 2) White space in <file> must be escaped or quoted for processing

Dependencies:
 1) bash version 5.0.17 +  - (associative arrays)
 2) borg version 1.2.3 +   - (deduplication)
 3) Ubuntu 20.04 +         - (sudo)

Configuration options are loaded from '$CONFIGURATION_FILE'

A Borg repository must be setup prior to using '$FILENAME'. Use:
	borg init /path/to/borg/repository

EOF
exit 1
}

parse_config() {
	typeset -A config
	
	config=(
		[BORG_PASSPHRASE]=""
		[BORG_REPO]=""
		[BACKUP_DB]=""
		[EXTRACT_TO]="$(getent passwd $SUDO_USER | cut -d: -f6)/temp"
		[USER]="$SUDO_USER"
		[DUPLICATE_REPO_PATH]=""
	)
	
	while read line; do
		if [[ "$line" =~ ^#.*$ ]]; then
			continue
		elif echo $line | grep -F = &>/dev/null; then
			varname=$(echo "$line" | cut -d '=' -f 1)
			config[$varname]=$(echo "$line" | cut -d '=' -f 2-)
		fi
	done < $CONFIGURATION_FILE
	
	export BORG_PASSPHRASE=${config[BORG_PASSPHRASE]}
	export BORG_REPO=${config[BORG_REPO]}
	export BACKUP_DB=${config[BACKUP_DB]}
	export EXTRACT_TO=${config[EXTRACT_TO]}
	export USER=${config[USER]}
	export DUPLICATE_REPO_PATH=${config[DUPLICATE_REPO_PATH]}
}

append_to_backup_list() {
	for argument in "$@"; do 
		if [[ ! -f "$argument" && ! -d "$argument" ]]; then
			echo -e "\nERROR: Path '$argument' doesn't seem to exist. Exiting.\n"
			exit 1
		fi
	done
	echo -en "\n"
	for argument in "$@"; do
		# normalize the input
		file=$(readlink -e "$argument")
  		if ! grep -Fxq "$file" $BACKUP_DB; then
			echo "Appending '$file' to end of '$BACKUP_DB'"
			echo "$file" >> $BACKUP_DB
		else
			echo -e "\nWARN: Path '$file' already exists in '$BACKUP_DB'\n"
		fi
	done
	echo -en "\n"
}

remove_from_backup_list() {
	num_lines=$(wc -l $BACKUP_DB | awk '{print $1}')
	
	typeset -A lines_passed

	for argument in "$@"; do
		if [[ $argument =~ $IS_NUM_REGEX && $argument -le $num_lines ]]; then
			# function received a number that is less than or equal to the number of borg backups
			db_entry=$(sed -n "$argument{p;q}" $BACKUP_DB)
			db_entry_line_num=$argument
		elif grep -Fxq "$argument" $BACKUP_DB; then
			# function received an entry tracked by the database
			db_entry=$argument
			db_entry_line_num=$(grep -nFx "$argument" $BACKUP_DB | cut -f1 -d:)
		else
			echo -e "\nERROR: No match to '$argument' found in '$BACKUP_DB'\n"
			exit 1
		fi
		lines_passed["$db_entry_line_num"]="$db_entry"
	done
	
	sed_string=""
	echo -en "\n"
	for key in "${!lines_passed[@]}"; do
		echo "Removing '${lines_passed[$key]}' from '$BACKUP_DB'"
		sed_string+="${key}d;"
	done
	echo -en "\n"
	sed_string="${sed_string%;}"
	
	sed -i "$sed_string" $BACKUP_DB
}

parse_parents() {
	while read line; do
		printf '%s\n' "$line"
	done < $BACKUP_DB | \

	# The awk command(s) below will create duplicate entries on unsorted data
	sort | \

	# The commands below (recursively?) creates a unique entry for the full *parent* directory structure 
	# pointing to the file/folder we want backed up,
	# Stolen from: https://serverfault.com/questions/877254/tar-does-not-retain-directory-permissions
	awk -F/ '{ d=$1; for (i=2; i <= NF; i++) { print d; d=d "/" $i }; print d }' | \
	awk '{ if (index(old,$0 "/") != 1) { old=$0; print } }' | \
	sed '/^[[:space:]]*$/d' | \
	sed '/\/$/d'
}

recurse_directories() {
	while read line; do
		if [[ -d $line ]]; then
			# this recursively prints all files and subdirectories of the folder we wish to backup
			find "$line" -print
		fi
	done < $BACKUP_DB
}

create_borg_backup() {
	echo -e "\nCreating new backup '$DATE' in '$BORG_REPO'\n"

	{ parse_parents && recurse_directories; } | sort -u | \
		borg create --paths-from-stdin "$BORG_REPO::$DATE"
}

list_borg_backups() {
	printf "%s\n%-8s%s\n" "" "#" "ARCHIVE NAME"
	printf "%s%s\n" "------  ------------"
	counter=0
	borg list "$BORG_REPO" | \
		while read line; do
			((counter+=1))
			archive_name=$(echo $line | awk '{print $1}')
			if [[ $# -eq 0 ]]; then
				printf "%-8s%s\n" "$counter" "$archive_name"
			elif [[ $counter -eq $1 ]]; then
				printf "%-8s%s\n" "[*$counter]" "$archive_name"
			else
				printf "%-8s%s\n" "$counter" "$archive_name"
			fi
		done
}

restore_borg_backup() {
	num_archives=$(borg list "$BORG_REPO" | wc -l)
	# Don't change permissions of /
	if [[ ! -d "$EXTRACT_TO" ]]; then
		install -d -m 0755 -o "$USER" -g "$USER" "$EXTRACT_TO"
		if [[ $? -ne 0 ]]; then 
			# This will probably never be displayed because the function requires root priv.
			echo -e "\nERROR: A problem occurred during extraction."
			echo -e "Try '$FILENAME --directory /path' or check '$EXTRACT_TO'\n"
		fi
	fi

	if [[ $1 =~ $IS_NUM_REGEX && $1 -le $num_archives ]]; then
		# function received a number that is less than or equal to the number of borg backups
		borg_archive=$(borg list "$BORG_REPO" | sed -n "$1{p;q}" | awk '{print $1}')
	else	
		borg_archive=$1
	fi

   	echo -e "\nExtracting '$borg_archive' to '$EXTRACT_TO'.\n"
	workingdir=$(pwd)
	cd "$EXTRACT_TO"
	borg extract $BORG_REPO::$borg_archive 2> /dev/null
	exit_code=$?

	if [[ $exit_code -ne 0 ]]; then
		echo -e "Borg Backup reports that archive '$1' does not exist in '$BORG_REPO'"
		echo -e "Use '$FILENAME --list' to display a list of all valid archives.\n"
	else
		echo -e "Success! Files extracted to $EXTRACT_TO.\n"
	fi
	cd "$workingdir"
}

borg_compact_and_prune() {
	borg prune --list --keep-daily=7 --keep-weekly=4 --keep-monthly=12 --keep-yearly=1 $BORG_REPO 
	borg compact $BORG_REPO
}

duplicate_borg_repo() {
	# This function silently duplicates the data in borg backup to a second destination
	# every time managebackups terminates cleanly

	# NOTE: the / after ${BORG_REPO} is actually very important!!!
	# it instructs rsync to copy the *contents* of ${BORG_REPO} instead of the the directory
	local primary_repo="${BORG_REPO%/}/"
	
	if [[ ! -z $DUPLICATE_REPO_PATH ]]; then
		rsync -au --delete "$primary_repo" "$DUPLICATE_REPO_PATH" > /dev/null
	else
		echo -e "\nWARN: Configuration option 'DUPLICATE_REPO_PATH' is unset. BORG repo will not be duplicated.\n"
	fi
}

print_database() {
	printf "\n%-8s%-8s%s\n" "#" "TYPE" "PATH"
	printf "%s%s%s\n" "------  ------  ------"
	counter=0
	cat $BACKUP_DB | \
		while read line; do
			if [[ -d $line ]]; then
				entry_type="Folder"
			elif [[ -f $line ]]; then
				entry_type="File"
			fi

			((counter+=1))
			if [[ $# -eq 0 ]]; then
				printf "%-8s%-8s%s\n" "$counter" "$entry_type" "$line"
			elif [[ $counter -eq $1 ]]; then
				printf "%-8s%-8s%s\n" "[*$counter]" "$entry_type" "$line"
			else
				printf "%-8s%-8s%s\n" "$counter" "$entry_type" "$line"
			fi
		done
}

get_password() {
	# This function is more a 'proof of concept' for a future version... the script can't edit itself so...
	read -s -p "Enter Password: " first_entry
	echo
	read -s -p "Re-Enter Password: " second_entry

	if [[ "$first_entry" == "$second_entry" ]]; then
		export BORG_PASSPHRASE="$first_entry"
	else
		echo -e "\nPasswords don't match. Please try again.\n"
		get_password
	fi
}

getopt --test 
[[ $? -ne 4 ]] && echo -e "\nERROR: this program depends on enhanced getopt. Please install before continuing\n" && exit 4

args=$(getopt -n "$FILENAME" -a -o "$GETOPT_SHORT" --long "$GETOPT_LONG" -- "$@")
# eval *can* be dangerous, see explanation here
#   - https://www.linuxquestions.org/questions/linux-desktop-74/alternative-to-eval-4175702722/#post6312000
# part of this thread
#   - https://www.linuxquestions.org/questions/linux-desktop-74/alternative-to-eval-4175702722/
# it appears to be safe with the version of getopt included on my system, which seems to quote the positional
# parameters and removes this danger, as explained in the post. Test on your system by echoing "$args" to the shell
eval set -- ${args}
typeset -A ARGS
while true; do
	# all long options will be excluded from ARGS
	if [[ "${1:0:2}" != "--" ]]; then
		ARGS["${1:1:1}"]=true
	else
		if [[ ${#1} -gt 2 ]]; then
			ARGS["${1:2}"]=true
		fi
	fi
	
	case "$1" in
		-a )
			ADD_ARGS+=("$2")
			shift 2	;;
		-b )
			shift	;;
		-c )
			shift	;;
		--directory )
			DIR_POSITIONAL_ARG="$2"
			shift 2	;;
		-e )
			EXTC_ARG="${2:=missing}"
			shift 2	;;
		-l )
			shift	;;
		-h )
			shift	;;
		--password )
			shift	;;
		-r )
			REM_ARGS+=("${2%/}")
			shift 2     ;;
		-s )
			shift	;;
		# -- means the end of the arguments; drop this, and break out of the while loop
		--)
			shift; break ;;
	    *) >&2 echo Unsupported option: $1
       	    usage ;;
	esac
done

if [[ ${ARGS[h]} || ${#ARGS[*]} -eq 0 ]]; then
	usage
	exit 0
elif [[ $EUID -ne 0 ]]; then
	echo -e "\n$FILENAME requires sudo privileges.\n"
    exit 1
else
	parse_config

	[[ ! -z ${ARGS[password]} ]] && get_password
	[[ ! -z ${ARGS[directory]} ]] && export EXTRACT_TO="$DIR_POSITIONAL_ARG"
	[[ ! -z ${ARGS[r]} ]] && remove_from_backup_list "${REM_ARGS[@]}"
	[[ ! -z ${ARGS[a]} ]] && append_to_backup_list "${ADD_ARGS[@]}"
	[[ ! -z ${ARGS[b]} ]] && create_borg_backup
	[[ ! -z ${ARGS[c]} ]] && borg_compact_and_prune
	[[ ! -z ${ARGS[e]} ]] && restore_borg_backup "$EXTC_ARG"
	[[ ! -z ${ARGS[l]} ]] && list_borg_backups
	[[ ! -z ${ARGS[s]} ]] && print_database

	duplicate_borg_repo
fi

exit 0

# The functions below are depreciated, and written prior to integration of this script with borg backup for deduplication / storage maangement
# They are preserved here in loving memory for posterity and learning

remove_from_backup_list() {
    if [[ ! -f "$1" && ! -d "$1" ]]; then
        echo -e "\nERROR: Path '$1' doesn't seem to exist. Exiting.\n"
        exit 1
    fi

    # normalize the input
    file=$(readlink -e "$1")
    if grep -Fxq "$file" $BACKUP_DB; then
        echo -e "\nRemoving '$file' from '$BACKUP_DB'\n"
        line=$(grep -nFx "$file" $BACKUP_DB | cut -f1 -d:)
        sed -i "${line}d" $BACKUP_DB
    else
        echo -e "\nWARN: No match to '$file' found in '$BACKUP_DB'\n"
    fi
}

restore_borg_backup() {
    num_archives=$(borg list "$BORG_REPO" | wc -l)
    if [[ $1 =~ $IS_NUM_REGEX && $1 -le $num_archives ]]; then
        # function received a number that is less than or equal to the number of borg backups
        # prompt for confirmation before extracting
        list_borg_backups $1
        while true; do
            read -p "Is this the archive you want to restore? [Y/n] " user_input
            user_input=${user_input:-Y}
            case $user_input in
                [Yy]es | [Yy] )
					borg_archive=$(borg list "$BORG_REPO" | sed -n "$1{p;q}" | awk '{print $1}')
                    install -d -m 0755 -o "$USER" -g "$USER" "$EXTRACT_TO"
                    echo -e "\nAttempting to extract '$borg_archive' to $EXTRACT_TO.\n"
                    workingdir=$(pwd)
                    cd $EXTRACT_TO
                    borg extract $BORG_REPO::$borg_archive 2> /dev/null
                    exit_code=$?
                    if [[ $exit_code -ne 0 ]]; then
                        echo -e "Borg Backup reports that archive '$1' does not exist in '$BORG_REPO'"
                        echo -e "Use '$FILENAME --list' to display a list of all valid archives.\n"
                    else
                        echo -e "Success! Files extracted to $EXTRACT_TO.\n"
                    fi
                        cd $workingdir
                    break
                    ;;
                [Nn]o | [Nn] )
                    read -p "Please enter the archive number or name you would like to restore: " user_input
                    restore_borg_backup $user_input
                    break
                    ;;
                * )
                    echo -e "\nINPUT ERROR: Valid responses are [Y/n].\n"
                    ;;
            esac
        done
    else
        install -d -m 0755 -o "$USER" -g "$USER" "$EXTRACT_TO"
        echo -e "\nAttempting to extract '$1' to $EXTRACT_TO.\n"
        workingdir=$(pwd)
        cd $EXTRACT_TO
        borg extract $BORG_REPO::$1 2> /dev/null
        exit_code=$?
        if [[ $exit_code -ne 0 ]]; then
            echo -e "Borg Backup reports that archive '$1' does not exist in '$BORG_REPO'"
            echo -e "Use '$FILENAME --list' to display a list of all valid archives.\n"
        else
            echo -e "\nSuccess! Files extracted to $EXTRACT_TO.\n"
        fi
        cd $workingdir
    fi
}


create_backup() {
        # This function is probably obsolete with borg backup... but should be preserved bcause a lot of effort went in to creating it
        # See create_borg_backup function for a backup solution that doesn't duplicate files that have already been backed up without
        # recent modification.
        echo -e "\nCreating new backup '$DATE.tar.gpg' in '$BORG_REPO'\n"

        { parse_files && parse_directories; } | sort -u | \
        tar -c --no-recursion --verbatim-files-from -T - -f - | \
        gpg --pinentry-mode loopback --passphrase $BORG_PASSPHRASE --symmetric  -o "$BORG_REPO/$DATE.tar.gpg"
}

restore_backup() {
        if [[ ! -f "$1" && ! -d "$1" ]]; then
                echo -e "\nERROR: Path '$1' doesn't seem to exist. Exiting.\n"
                exit 1
        fi

        # normalize the input
        file=$(readlink -e "$1")

        if [[ $file != *.tar.gpg ]]; then
                echo -e "\nERROR: '$(basename "$file")' is not a valid backup. Please provide a '.tar.gpg' extension."
                exit 1
        else
                install -d -m 0755 -o "$USER" -g "$USER" "$EXTRACT_TO"
                echo -e "\nExtracting '$FILENAME' to $EXTRACT_TO.\n"

                gpg --pinentry-mode loopback --passphrase $BORG_PASSPHRASE --output - --decrypt $file | \
                tar -xf - -C "$EXTRACT_TO" > /dev/null
        fi
}
