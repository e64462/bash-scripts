#!/bin/bash

validate_option() {
	# returns 0 if option is valid and requires arguments
	# returns 1 if option is valid and does not require an argument
	# returns 2 if option is invalid

	# UPDATE SHOULD -
	# return 0 if option is valid and requires 1 or more arguments
	# return 1 if option is valid and requires exactly 1 argument
	# return 2 if option is valid and requires 0 arguments
	# return 3 if option is invalid

	local opt="$1"		# option to search for
	local lgth=${#opt}

	local goffset 
	if [[ $lgth -eq 1 ]]; then
		# opt is short
		local optstr=$SMOL_OPTS
		goffset=${optstr%%$opt*}
		goffset=${#goffset}
		if [[ $goffset -lt ${#optstr} ]]; then
			# a match was found
			if [[ "${optstr:$(( goffset + lgth )):1}" == ":" ]]; then
				# the option requires 1 or more arguments
				return 0
			elif [[ "${optstr:$(( goffset + lgth )):1}" == "!" ]]; then
				# the option requires exactly 1 argument
				return 1
			else
				return 2
			fi
		fi
	else # opt is long
		local optstr="$LONG_OPTS"
		local lastchar="${optstr: -1}"
		local firstchar="${optstr:0:1}"
		local offsetadjust=0
	
		[[ "$firstchar" != "," ]] && optstr=",$optstr" && ((offsetadjust++))
		[[ "$lastchar" != "," ]] && optstr="${optstr},"
	
		local fullstring_matches=(",${opt}," ",${opt}:," ",${opt}!,")
		
		local match
		for match in "${fullstring_matches[@]}"	; do
			goffset=${optstr%%$match*}
			goffset=${#goffset}
	
			if [[ $goffset -lt ${#optstr} ]]; then
				# a match was found
				((goffset++))
				[[ "$firstchar" != "," ]] && ((goffset--))
				if [[ "${match: -2:1}" == ":" ]]; then
					# the option requires one or more arguments
					return 0
				elif [[ "${match: -2:1}" == "!" ]]; then
					# the option requires exactly one argument
					return 1
				else
					# the option does not require any arguments
					return 2
				fi
			else
				goffset=$(( ${#optstr} - offsetadjust ))			
			fi
		done
	fi
	return 3
}

args2array() {
	declare -n __arr=$1 && shift
	
	local __exitcode __ctr=0 __i __exitcode __opt

	while (( $# > 0 )); do	
#		echo "first positional is '$1'"
		if [[ ${1:0:1} == "-" ]]; then
			__opt=${1//-/}
			# we're working with an option
#			echo "searching optstrings for '${__opt}'"
			validate_option "${__opt}"
			__exitcode=$?
			if [[ $__exitcode -gt 2 ]]; then
				echo "error: option '$1' is not a valid option"
				exit $__exitcode
			else
#				echo "hyphen-stripped param is: '${__opt}' and __arr[${__opt}] is '${__arr[${__opt}]}'"
				if [[ $__exitcode -eq 0 ]]; then
					__ctr=0
					for __i in "${@:2}"; do
						if [[ ${__i:0:1} == "-" ]]; then
							break
						else
							if [[ ! ${__arr[${__opt}]+isset} ]]; then
								__arr[${__opt}]="${__i}"
							else
								__arr[${__opt}]="${__arr[${__opt}]};${__i}"
							fi
							# printf '%q\n' "${__arr[${__opt}]}"
#							echo "appending: '${__arr[${__opt}]}'$__i' ' to __arr[${__opt}]"
							# __arr[${__opt}]="${__arr[${__opt}]}'$__i' " # this formatting requires eval - bad
							(( __ctr++ ))
#							echo "__arr[${__opt}] is now '${__arr[${__opt}]}'"
						fi
					done
					if [[ $__ctr -eq 0 ]]; then
						echo "error: option '$1' requires an argument"
						exit 1
					else
#						echo "__ctr is '$__ctr'"
						shift $__ctr
					fi
				elif [[ $__exitcode -eq 1 ]]; then
					if [[ ! ${__arr[${__opt}]+isset} && -n "$2" && ${2:0:1} != "-" ]]; then
						if  [[ -z "$3" || "${3:0:1}" == "-" ]]; then
							 __arr[$__opt]="$2"
	                        shift
						else
							echo "error: option '$1' takes exactly one argument"
							exit 5
						fi
					else
						echo "error: option '$1' takes exactly one argument"
						exit 5
					fi
				else
					 __arr[${__opt}]=""
				fi
				shift	
			fi
		else
			shift # ignore every option not starting with -
		fi
	done
	# printf '%q\n' "${__arr[a]}"
}

unpack_args() {
	declare -n _a=$1	# xD
	local _pld=$2
	local IFS=';'
	_a=($_pld)
}

# UNCOMMENT these lines and run the examples below for usage
# ---------------------------------------------------------------------

# SMOL_OPTS="a:b!c"    # NOT comma separated, : denotes mandatory argument
# LONG_OPTS="alpha!,beta:,gamma" # comma separated, : denotes mandatory argument

# declare -A associative_array # must be declared BEFORE function call

# args2array associative_array "$@"

# Print the key=value pairs
# for key in "${!associative_array[@]}"; do
#	printf "%s=%s\n" "$key" "'${associative_array[$key]% }'"
# done

# -----------------------------------------------------------------------
# EXAMPLE-1 USAGE 

# $ args2array -a arg-1 arg\ 2 "arg 3" --alpha --beta arg -a arg-4 -b
# beta=''arg''
# alpha=''
# b=''
# a=''arg-1' 'arg 2' 'arg 3' 'arg-4''

# $ echo $?
# 0

# -----------------------------------------------------------------------
# EXAMPLE-2 USAGE

# $ args2array -a arg-1 -f
# error: option '-f' is not a valid option

# $ echo $?
# 2

# -----------------------------------------------------------------------
# EXAMPLE-3 USAGE

# $ args2array -a
# error: option '-a' requires an argument

# $ echo $?
# 1

# ------------------------------------------------------------------------
# EXAMPLE-4 USAGE

# $ args2array --beta
# error: option '--beta' requires an argument

# echo $?
# 1

# ------------------------------------------------------------------------
